,Unnamed: 0,median,median2,Topic_Num,Topic_Perc_Contrib,Topic_Name,Keywords,Text,lower_quartile,upper_quartile,lower_whisker,upper_whisker,Total
22,10,6.5,8749.454375,10,0.2733,Chemical Calculations,"input, calculation, read, energy, regtest, orbital, structure, atom, force, molecule, due, spin, charge, cell, density, restart, scf, core, moment, computation","changes in the available mixing procedures, as used in QS calculations together with diagonalization A new section DFT%SCF%MIXING should be used to specify type of mixing and related the old keyword DFT%SCF%MIXING is no longer The available mixing procedures are at the moment the direct density-matrix mixing (default), the Kerker damping, the Pulay mixing, and the Broyden The latter three are performed in reciprocal space, therefore are applied only to the density already on the When OT is used, no mixing is Some regtest are added 8313",3,14.75,1,27,3127
21,16,7,4993.353017,16,0.3415,Configuration Interaction,"number, give, result, multiple, store, element, calculate, previously, thread, procedure, iteration, single, find, large, sign, select, weight, determinant, previous, column","CC death for reals on the same footing as In FCIQMC death occurs for particles which already exist and so it makes sense to do it In CCMC we select clusters of excitors, the combination of which may not yet exist and so death (at least for clusters of more than one excitor) is really a spawning This is compounded by (currently) calling death once per excip rather than once per excitor (which would be possible for the non-composite For clusters which we select a lot the reference and individual excitors which are highly occupied), this leads to a large number of entries in the spawned array each with a small weight, which is not ideal for Stochastically rounding this to the spawn cutoff, as is done for spawning in FCIQMC and CCMC, essentially solves this",2,18,1,40,2116
23,24,6,4610.42051,24,0.3549,Path Integral,"function, compute, integral, term, potential, hamiltonian, derivative, correction, functional, evaluate, gaussian, diagonal, evaluation, storage, convention, contraction, related, contribution, product, calculate","Two local minima could be found, depending sensitively on POWELL| Reached 53% of maximal function calls POWELL| Reached 54% of maximal function calls POWELL| Number of function evaluations 5407 POWELL| Final value of function Optimized local potential of approximated nonadditive kinetic energy functional 1 Gaussian polynomial expansion Coefficients 2 Gaussian polynomial expansion Coefficients 3 Gaussian polynomial expansion Coefficients POWELL| Reached 28% of maximal function calls POWELL| Number of function evaluations 2889 POWELL| Final value of function Optimized local potential of approximated nonadditive kinetic energy functional 1 Gaussian polynomial expansion Coefficients 2 Gaussian polynomial expansion Coefficients 3 Gaussian polynomial expansion Coefficients 16407",2,18,1,42,1832
20,22,8,4590.449306,22,0.4469,Message Passing,"extra, option, message, parallel, grid, info, generator, task, member, ability, group, point, require, couple, distribute, object, basis_set, cdfa, network, share","branch master of into excited_state Added function to round charges to match the net required Removed partial charge calculation when reading with rdkit which would some times cause valid files to Cleaned up openff parametrisation to use the rdkit_mol object and not Updated file reading in ligand, fixed corresponding Added param test for openFF and testing tests update Cleaned out examples to example Added genetic optimiser option to Fixed bug where the rdkit_mol in the ligand was removed when we failed to read a Rdkit class can now add conformers and calulate RMSD which is now an error in dihedral Fixed gaussian solvent bug where solvent was called for opt and frq Charemol parallel options added and exception openff can now do all elements using generics but with no dihedral timing recorded and rmsd error Si parameters added to lj radius not fit ligand and run clean Chargemol now ran in Added an extra improper case with nitrogen centers found in the coverage Openff splits improper force constants over all combinations of the torsion these are now grouped into one term at Dihedral scanner will now use the spacing and start and end points Improper fix in base_param method rdkit now uses the rdkit_mol to generate conformers to minimise file OpenFF has extra exception catches for missing atom Ligand now determines classes for bonds angles and dihedrals and groups even when order is dihedrals now fits symmetry equvilent torsions based on dihedral_types ligand configs changed, multipule scans now L-J parameter",3,15.5,1,29,1663
19,23,8,4542.373049,23,0.3537,Parameter Checks and Selection,"parameter, variable, state, issue, correct, order, check, space, correctly, set, save, branch_extra, branch_prerelease, cba, address, implement, unused, scale, properly, apply","draw method scale SamplePulse, Schedule (#3424) * Update Setting the `scale` parameter to a default from a default value of to a default value of 1 to prevent clipping of the returned * adjust and deprecate scaling parameter use scale instead Adjust scaling parameter in to ensure consistent zooming behaviour with function Deprecate scaling parameter in use scale * deprecate scaling parameter use scale instead Deprecate scaling parameter in use scale * Revert deprecate scaling parameter use scale instead"" This reverts commit * Revert adjust and deprecate scaling parameter use scale instead"" This reverts commit * Updates draw SamplePulse, Schedule Adjust scaling parameter in to ensure consistent zooming behaviour with function Deprecate scaling parameter in use scale Deprecate scaling parameter in use scale * Revert ""Update This reverts commit * Fix Lint Issues Fixes for Lint issues in previoius * Deprecation warning for staging parameter * Revert ""Fix Lint Issues"" This reverts commit * Further Lint Fixes * scaling parameter changed to scale * Typo Fix * Further Lint Fix * More Lint Fixes * Lint Fix * Fix omitted warnings import * Set scaling parameter to float Thomas Alexander * Set scaling parameter to float * Change `scale` to `scale_factor` && Cleaner zooming fix * Remove log import * Deprecate scaling in schedule and pulse drawers * Lint Fixes * Lint Fix * Lint Fix * More Lint Fixes * Set more general conditonal to call scaling deprecation warning * Use `scale` instead of `scale_factor` to deprecate the `scaling` keyword for visualizations * Lint Fix * Create * Set scaling parameter to None to prevent deprecation warning * Remove code redundancies in constructors and conditionals * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto * Update Lauren Capelluto Thomas Alexander Lauren Capelluto Kevin Krsulich",3,21,1,43,2064
12,14,10,4518.612222,14,0.3588,Gates Decomposition,"default, set, support, matrix, flag, basis, full, reset, solver, initial, driver, decomposition, global, consistent, distribution, direct, setup, view, factor, addition","fixes for 320px displays (#134) * responsiveness changes * changed toolbox scaling to viewbox * reset with comment firebase * fixed encyclopedia views * uncommented fb config * making the game layout take up less vertical space * responsiveness changes * changed toolbox scaling to viewbox * making the game layout take up less vertical space * responsiveness changes v4 * fixed goals typo * reset with comment firebase * responsiveness changes * changed toolbox scaling to viewbox * fixed encyclopedia views * uncommented fb config * making the game layout take up less vertical space * additional responsiveness changes (#128) * responsiveness changes * changed toolbox scaling to viewbox * reset with comment firebase * fixed encyclopedia views * uncommented fb config * prettier lint autofix after PR 128 * Making the game layout take up less vertical space, plus encyclopedia article fixes for (#129) * responsiveness changes * changed toolbox scaling to viewbox * reset with comment firebase * fixed encyclopedia views * uncommented fb config * making the game layout take up less vertical space * style(LevelMapPage) * responsiveness changes * changed toolbox scaling to viewbox * yarn lint * making the game layout take up less vertical space * responsiveness changes v4 * fixed goals typo * uncommented firebase * making mobile adjustments for new ui elements * fixes for 320px",4,24,1,53,2344
11,13,11,4399.130833,13,0.3569,Arrays and Matrix Operations,"type, operator, array, index, complex, size, vector, real, pointer, definition, function, due, double, miss, constructor, return, correct, conversion, simple, reference",changes from d589639b4 put feature macro guard abd9cd3e8 add contructor that can take a the constructor for a type of memory d2a08b7f0 check for defined variable for c++ feature (memory resource) 777428b1d simplify operators tests 64e43820b use is_empty f0bc1b6b8 simplify blas operations f14bdfd7a update core command line 626d3dca1 make gemm use the new involuter c810caff3 make dot use the new involuter,3.75,24.5,1,51,2474
15,11,9,4207.456667,11,0.3121,Memory and Performance Optimization,"datum, print, write, routine, memory, avoid, information, point, gradient, performance, time, common, kernel, large, request, wavefunction, speed, problem, cc_cdfa, additional","interface update Added code to and to gather data from files that are generated from running Tinker This includes fixing the Tinker_xyz class to print all of the stderr and stdout to a single The file can still be printed out of order within a calculation analyze) but prints the correct calculation order (analyze section, minimization section, analyze section, hessian So far all of the data is printed Im worried that bigger systems may cause problems with printing, or systems that use parameters both in Tinkers standard params files and our Q2MM parameterized Regardless, the disorder in printing to the file introduces a problem when comparing the data with The order of interactions is never the same between the pre- and post-optimized An example is shown test_files]$ python "" Label Weight Value Score b_test2_1-2 b_test2_1-4 b_test2_1-5 b_test2_5-6 b_test2_5-7 b_test2_5-8 b_test2_1-3 Total data 7 test_files]$ python "" Label Weight Value Score b_test2_1-3 b_test2_5-6 b_test2_1-4 b_test2_1-5 b_test2_5-7 b_test2_5-8 b_test2_1-2 Total data 7 These two calculations where done From this point its going to be necessary to organize the compare information by the This will also solve our torsion problems that we have had in the Currently I have only added code for the following commands",3,20.5,1,37,2341
8,3,10.5,4176.129861,3,0.5519,Calibration & Visualization,"error, fix, check, bug, code, argument, unit, plot, channel, empty, pulse, car, merge, schedule, function, condition, convert, comment, embed, base","methods of half-up (#218) * fixed confusion in function description * translations from mathematica to python * work on those notimplementeds * decoder class adittion * modified decoder extractor implemented * no need for pauliaction function * introduction of symbolic binary class no more decoder class * minor bugs fixed, applies binary rules to input now * started programming the BinaryCode class, work in progress * added count qubit function in binary operator, modified * fixed morning brain bugs * implemented concatination and appending, not yet documented and debugged * added _shift function to symbolicBinary and integer modified the decoder shifter accordinly * radd imul, NOT TESTED just copy paste should * fixed small bugs, added default codes, created transform * fixed the multiplication error and modified the transform code following mathematica it was giving wrong operators before, now the operators are fine but signs are wonky * fixed the transform and all the places where we accidentally started to count labels from 1 instead of 0 * bug ordering matters to detect which terms should cancel * fixed code appending, introduced the integer multiplication (left+right) as a tool to append the same code intance several times * modified the multiply by 0 and 1 behavior in added tests for minor mods for python3 * fixed the condition for code concatenation, fixed a bug in checksum_code, added an error if qubit index in a code is out of bounds * added comments to binary_operator, more test, evaluate function * started writing documentations and clipping lines, writing out numpy * merging with the merger * updating binary operator based on comments * updating the binary_ops * updates based on comments * init update * moved binaryop to first import * added names into notice and readme * started documentation in added parity code and segment code binary addressing code * encoders are sparse matrices now * added tests for code_operator * doc strings for the transform, fixed bug in the initialization of SymbolicBinary, made changes suggested by review, carried some of them over to files to be pulled later * updates based on pull request comments * merging changes with merger * fixing possible integer checking errors * cleaned version of transform function, needs testing and timing seems to work so far * fixed BK indexing errors * added tests, pep8 and Ryan compliance mods * added some style to the functions file * renaming, re-structuring * renaming again * minor changes * pep8 * changed the symbolicBInary class * docstring cleanup * bug docstring fixes * bug fix in the evaluate method, pep8 the _binary_operator file * merge with upstream and additional tests to SymbolicBinary class * added weight-two segment code test, fixed bug with in the code appending by integer multiplication * added half-up code * bugs fixed in half-up code * corrected weight_one_segment_code and the interleaved_code, former Added tests for the * get rid of heads * reordering function for the fermionOperator takes * spin indexing within moleculardata * proper master reset",4,21,1,44,2391
13,12,9,4103.516308,12,0.483,Code Integration,"make, change, remove, code, work, clean, commit, interface, copy, separate, branch, header, command, check, internal, simplify, complete, avoid, part, include","commit of the commit d736dd4fdf19845e9fda64592b88d53f058bcb86 Vlad Gheorghiu Mon Sep 7 2020 commit 47727e6c5fb7bd4c2b50f42ad2aeb183acd4dd5c Vlad Gheorghiu Mon Sep 7 2020 Update commit 376fc7d29287f8c2775e6b92f123af075a41e654 Vlad Gheorghiu Mon Sep 7 2020 Update commit 4e73e974cb6ca4867e5dadaa4952873cbd53ef1c Vlad Gheorghiu Mon Sep 7 2020 Update commit 78fb07c2a627dec60da417ebf9e0d07267ecf863 Vlad Gheorghiu Mon Sep 7 2020 Update commit e8bf25f1050cb388b34f0e5623e34775846c3a26 Vlad Gheorghiu Mon Sep 7 2020 Update commit 0d12060d0cc904a6f801565b0e6786e11b06baa0 Vlad Gheorghiu Mon Sep 7 2020 Update commit 3b6343d463f007d5e95e3ccca390696ae1570a6f Vlad Gheorghiu Mon Sep 7 2020 Update commit f0fd50831d4c4e5e3ac4c7496d06a1bc1fab49c3 Vlad Gheorghiu Mon Sep 7 2020 CMake tweaks commit e8a946f077afc36f9b1113932ddebc0e769778e0 Vlad Gheorghiu Sun Sep 6 2020 commit 9b3960858ee4aff745144c14ef755d2f0ce3f097 Vlad Gheorghiu Fri Sep 4 2020 OpenMP flag commit a6c27ca760a6e305fefd0fac8acf5649479ab6ac Vlad Gheorghiu Fri Aug 28 2020 commit dbc57a93d6356042f958c1c2c3c0b9cf9a51d14d Vlad Gheorghiu Fri Aug 28 2020 c commit 5b0cf592f7113575834d4791d4acb33ddc2e76ae Vlad Gheorghiu Fri Aug 28 2020 Update commit aecc51cf1fc938d3876cdbfb243239602eeb5175 Vlad Gheorghiu Fri Aug 28 2020 switch to Bionic in Travis CI commit b5cc408c2f1ff31c9ad70fb113d6fa09e082e1b9 Vlad Gheorghiu Tue Aug 25 2020 commit 65db42855f0d41645be8d3a9309b62406cc773e9 Vlad Gheorghiu Sun Aug 23 2020 Update commit 66128e57895bb60ce80f77f0f2a1557690fc8924 Vlad Gheorghiu Fri Aug 21 2020 update commit 5c62ed2ad537177e6505ffa43bd0e9c02e6ccf71 Vlad Gheorghiu Fri Aug 21 2020 Update commit 766641c79fa79a5434e84ac4e7e7e7854b6d8979 Vlad Gheorghiu Fri Aug 21 2020 Update OpenBSD compat commit 08f2aaa006eda985e4172efab8ce14db40750dec Vlad Gheorghiu Fri Aug 21 2020 Update commit 2ef821c9957576f70d250402ed3a2f5d5a30499f Vlad Gheorghiu Fri Aug 21 2020 commit 9c51c9a1fe02df520e11810186ed6de5a92ed22a Vlad Gheorghiu Mon Aug 17 2020 Update commit 4259bb14cf46f200a8c187b9d0d2038e4383ac12 Vlad Gheorghiu Mon Aug 17 2020 Update commit f231bcea5923d5c0e8ce85a3002037faef3811e6 Vlad Gheorghiu Mon Aug 17 2020 clang-tidy commit 58d50c44cafd3010e132584f793ce5d5b9375006 Vlad Gheorghiu Mon Aug 17 2020 clang-tidy commit 7770eb31113f0ff8f8e773dd2e36458b6871adb0 Vlad Gheorghiu Mon Aug 17 2020 clang-tidy commit 231ec9f361f6d3086689eb0e27a31c1a14238e43 Vlad Gheorghiu Sat Aug 15 2020 Update commit 51ade7d8d5cb50f6bc6083e2b1b65cb11901f082 Vlad Gheorghiu Sat Aug 15 2020 clang-tidy commit 74dc9d24d007ed4193666b9bacf76b26ab2c54b4 Vlad Gheorghiu Fri Aug 14 2020 Update CHANGES commit c4572148196ad69cdd7abe41e1a62e2dd7aa61ce Vlad Gheorghiu Fri Aug 14 2020 refactoring commit 7e3fa11fe69e487e0eae8a8e93af38488349974c Vlad Gheorghiu Tue Aug 4 2020 Update commit e9bb0d9bc1214165d1d70bcbb99a08c820ed0e81 Vlad Gheorghiu Tue Aug 4 2020 Update fixing Solaris bug commit 1c1e98b1043766e5ea239c53c2dcf43b4755fd82 Vlad Gheorghiu Sun Jul 26 2020 Update commit c6d2592b1b976917417494d70ac51bc069fe9e32 Vlad Gheorghiu Sat Jul 25 2020 Update commit e71a47c76fd755ad750f1ffd31f97ff679c1dc48 Vlad Gheorghiu Sat Jul 25 2020 Update commit 0ed61bb5204a11d5d4529ce4f5970b305c93983c Vlad Gheorghiu Sat Jul 25 2020 commit 7b8283b8b18df703530466930621ceea4263390c Vlad Gheorghiu Sun Jul 19 2020 Revert ""Update This reverts commit d7429f7a7df22770bb118967e493be84f6636e70 Vlad Gheorghiu Sun Jul 19 2020 Update commit 575fbadb354c1ab8eb050cdad3b2554e800a8aad Vlad Gheorghiu Sun Jul 19 2020 Update commit b28bdbddcbf61bfcb25d8266b378a655c623c5db Vlad Gheorghiu Sun Jul 19 2020 Update commit 25e7a5ce9913090869e93b58ec264be18d86be66 Vlad Gheorghiu Sun Jul 19 2020 Update commit dbe4ab753a07545c97665b7048b9fb416052a296 Vlad Gheorghiu Sun Jul 19 2020 Update commit b940c8464e12ca01c918debc158e33249f0d71b9 Vlad Gheorghiu Tue Jun 30 2020 Update commit e314a907d267a415a79f610ed0249a6ca602f760 Vlad Gheorghiu Sun Jun 28 2020 Update commit d79c9a93e95113cd82277a5bb7a58338ef676c37 Vlad Gheorghiu Sat Jun 27 2020 commit 5d6fb1a1bf05dc4f8b595e1c28f370c243d52209 Vlad Gheorghiu Thu Jun 18 2020 Update commit ea2bb4ca0a9bfc9549ad23f7fb37a489679f29bb Vlad Gheorghiu Thu Jun 18 2020 Update commit 4400a8e71089a739fce9c581a1dd2b7e62c300d6 Vlad Gheorghiu Thu Jun 18 2020 commit 4e4120bfaad8e13dfae1c1fd526d804c18f898db Vlad Gheorghiu Thu Jun 18 2020 Update commit dfbd5179b24a48ad349f36d797e7372a460e192e Vlad Gheorghiu Thu Jun 18 2020 Update commit ccf1b239ba7b993041aba1cca55919e9d4edcaf4 Vlad Gheorghiu Tue Jun 16 2020 Update commit 11b2ab5b62593d17932587b9deb3f420a98aeef2 Vlad Gheorghiu Tue Jun 9 2020 Update commit a0a5fdf6c5c8daca2a78be7c87fb5ffb7edefefc Vlad Gheorghiu Tue Jun 9 2020 Update commit 51c967d5281924384b413e50cb290654e9fdd580 Vlad Gheorghiu Thu May 28 2020 moved maxn to internal commit f6b70325dff7c1f3db24a0f9701adfa98eed4bfa Vlad Gheorghiu Mon May 25 2020 Update commit 257b289732207b8e017c2f35dfe09fe5871226bc Vlad Gheorghiu Tue May 19 2020 prettyprint commit 27847835495c5ff79afe9a01dd3424141d324c1d Vlad Gheorghiu Tue May 19 2020 Update commit 33560f322161df1806558f686713710fbdab88a2 Vlad Gheorghiu Tue May 19 2020 commit 938a1e132a7acf710319b46397b41064637010de Vlad Gheorghiu Tue May 19 2020 > 0 commit db758b21529175d06d6f233d6e941682b784b1a4 Vlad Gheorghiu Tue May 19 2020 Update commit 12d3d90cdb740ce7c4e501147291ef401f5699e2 Vlad Gheorghiu Tue May 19 2020 Update commit 1a100b027eda3e67377a7d64e0954305a546c6a8 Vlad Gheorghiu Tue May 19 2020 Update commit 751f476c83ef326cbc7e2a40f07d4a3b899e2421 Vlad Gheorghiu Mon May 18 2020 static_cast(-1) commit 07eb3364cc68d2eb6fc652e612840fe72eabd009 Vlad Gheorghiu Mon May 18 2020 Update CHANGES",3.5,19,1,36,1542
5,2,12,3821.462222,2,0.4327,I/O and Text Format,"output, case, line, handle, string, call, close, log, parse, long, standard, replace, image, expression, find, produce, show, range, testing, clear",context-aware code completion for expressions (#116) * Start working on an expression parser for completions * More correct many * Move prefix operator parser out of expression term * Parse functors and the unwrap operator * Raise exception when parsing fails * Parse call expressions * Replace unnecessary let rec with let * Replace peek with FParsecs lookAhead * Rename custom parser operators * Return type keywords from parser This removes the need to keep another list of type keywords in Also do a general cleanup of the completion * Distinguish between UDTs and type parameters * Optimize pcollect * More parser cleanup * Add literals to expression parser * Parse value tuple and value array expressions * Clean up parsing tests * Parse array access expressions * Parse new array expressions * Parse named item accessor operator * Parse copy and update expressions * Parse conditional expressions * Fix operator parser doc comment * Parse open range op as prefix or standalone * Add more operators to the expression parser * Parse string literals in expressions * Add tests for neseted interpolated strings * Improve error message for pcollect * Parse type parameters in call expressions * Make sure the completion parser parses the entire string * Use completion expression parser from the language server * Make sure character number is within the line This fixes an exception when trying to get completion soon after the language server starts (probably because the file content hasnt been completely loaded * Show all completions if parsing fails * Re-add LTE and remove LT operators from infix * Allow qualified symbols in expressions * Clean up fallback completions and remove IsDeclaringNewSymbol * Fix merge mistakes * Fix doc for and update doc for operators * Use the completion expression parser for characteristics * Show _ as a keyword * Avoid parser references using computation expressions * Fix indentation * Update bettinaheim * Re-add tests for parser failures * Replace completion parser exception with DU,4,31.5,1,72,2592
6,5,11,3559.411111,5,0.4623,Feature Expansion,"implementation, block, base, define, make, introduce, field, current, user, break, provide, part, specific, model, exist, easy, constant, optional, feature, include","shallow schema (#1350) * `shallow_schema` refactor to make its generation more Overview This PR introduces a kind of _mixin field_ `ModelValidation` with model type All the Marshmallow fields are imported into and extended to include the The same happens with polymorphic fields and Validation is possible thanks to a special copy of the model schema, the _shallow schema_, which replaces the `_deserialize` private method of its fields (at instance-level) to use the new `validate_model` from the `ModelValidator` Validating models consist into checking that the values are of the corresponding For regular fields, the type they deserialize to (deserialization For fields containers (such as lists), the deserialization type of the contained For schema containers (such as nested schemas), the type of the schemas For polymorphic fields, one of the deserialization types of the For polymorphic schemas, one of the types of the possible schemas While validating, nothing more than the type of the value is Validation assumes that the values of the inner properties are already valid or they would have failed during their For instance, ```python Terror"", Simmons"")) ``` `Person` instantiation is executed If successful, validating `Book` does not require `author`s internal structure `name`) to be validated again since otherwise, construction of `Person` would have This refactor continues patching the method `_deserialize` of the schema fields but, instead of deciding how to patch it according to the type, it makes `_deserialize` to call a new custom method `_validate_model` with the desired The different strategies from the block of the original implementation are now spread over the fields defined in This package also contains versions of that include their own `_validate_model` * Organize the fields into several modules and factor out This PR split the fields into general fields, containers and Each module has the definition of the different kind of It also provides a base field for those able of model type validation and a general mechanism to perform this * Polishing docstrings and reviewing container and polymorphic * Rename to make intentions clear and fixed fields hierarchy * Moving tests to its own folder * Split tests into different categories * Docstrings fixes and * Style, convention and doc tweaks * Update CHANGELOG",5,24,2,47,2097
9,4,10.5,3404.616643,4,0.6591,Program Optimization,"optimization, bit, debug, bug, unit_test, fix, remove, control, phase, benchmark, optimize, device, check, case, coverage, buffer, testing, cleanup, single, comment","with multiple devices (cluster support with VirtualCL) (#65) * Making compile for multiple devices * Fixing types for clang * Fixing types for clang * CPU and accelerator build in same context * Device-specific kernels * Replacing OCL device ID with map * Kernel-by-queue lookup in QEngineOCL * QEngineOCLMulti stub * Checkpoint 1 single bit gate compiles * Checkpoint 2 QEngineOCLMulti interface stubbed * Checkpoint 3 Single bit rotation gates * Checkpoint 4 Controlled gates * QEngineOCLMulti compiles and runs, for one unimplemented test * Debugging single bit unit tests * First unittest with (highest) distributed bit * Single bit Pauli gates * Singly-controlled gates * Singly controlled gate debugging * Buffer swap bug fix * Doubly controlled gates * Swap * Quasi-Boolean gates * Restoring unit tests * Adding for Travis * Experimental many-device single bit gates * Partial experimental controlled gate handling for many devices * Debugging controlled generalization * Experimental controlled generalization * Debugging swap, controlled gates * Double controlled and refactor * Experimental CCNOT branch * Experimental CCNOT branch * Swap optimization * Fixing Swap * Very inefficient Cohere * Cohere * Cohere optimization * Fixing optimizing QUnit * Reverting implemented Dispose * Implementing and debugging OpenCLMulti QUnit (UNIT TESTS MAY CORRUPT HEAP) * Debugging * Obvious implementation that doesnt scale * Generalizing M() * Generalizing Prob() * Generalizing Prob() * macOS High Sierra compiler compliance * Wrapping bitwise parallel engine optimizations into multi-engine * Fixing M() bug * Various small fixes * Normalization bug fixes and controlled gate kludge * Fixing wrong buffer fill size_t * Fixing low qubit edge cases * Fixing SBC test * Single bit X bug isolated * Single bit gate bug isolated * Single bit bug kludge * All high bit logic shunted * CPhaseFlip bug fixed * Passing all unit tests, but kludged * De-kludging controlled gate cases * De-kludging controlled gates * Optimizing Swap * Fixing headers and loop-control-variable types, make format * Prepping for higher node order testing * Testing with 4 Refacoring * Removed isOverloaded * Re-enabling normalization * OpenCL coverage for normalization * length variant coverage * Cheaper normalization * Small bug in normalization * Cheaper normalization * New CNOT case * All CNOT cases * All controlled gate cases * Revert * Cluster-safe Swap * Swap length variant * All (n-)controlled cases * Optimizing CNOT variants * Optimizing CNOT variants * Optimizing X * Optimizing X length variant * Optimizing X length variant * Optimizing X length variant * Fixing length X (without unit test coverage) * MetaX * MetaX * Make format * Multiple platforms (single node) * Optimizing and refactoring CNOT variants * Making multi-OCL thread debugging higher order device * For 4 devices, kludged but passing unit tests * Better lock_guard * Scales arbitrarily, kludged * Checkpoint * Generalized MetaControlled gates * Generalized MetaControlled gates * All CNOT edge cases handled (but not CCNOT) * Debugging MetaControlled * Kludged double-controllled, working up to 16 subengines * Improving MetaControlled() * Improving MetaControlled() * Debugging debugging mutexes * Debugging intermittent normalization bug * Debugging intermittent normalization bug * Removing CombineAndOpSafe() * Debugging normalization * Debugging normalization * CCNOT edge case, tested up to 64 sub-engines * All CCNOT edge cases covered, (maybe redundantly) * Refactor * VirtualCL compatibility * Offloading to OpenCL * Optionally device overload mutexes * Correcting OpenCL header includes * Safer CCNOT * Revert ""Safer CCNOT"" This reverts commit * Safer CCNOT * Make format * General cleanup, per review * General cleanup, per review * General cleanup, per review * OCLDeviceContext changed from class to struct * Exposing ApplySingleBit publicly * Adding Pauli operator exponentiation gates * Exp identity variant * Safer kernel call locking, per review * Attempt at RVO, per * Removing shared pointer to * Make format * reference count check in ~OCLDeviceCall() * Removing custom destructor from OCLDeviceCall * Removing custom destructor from OCLDeviceCall * Many changes per review on PR * Many changes per review on PR",4,24,1,50,2100
2,15,14,3390.913089,15,0.737,Configuration Files,"file, create, generate, script, system, level, include, match, folder, generation, load, component, color, setting, seed, directory, multiple, button, step, enable","Entering directory cd AOs make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd BiInts make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Bitmask make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Dets make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Electrons make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Ezfio_files make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Full_CI make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Generators_full make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Hartree_Fock make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd MOGuess make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd MonoInts make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd MOs make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Nuclei make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Output make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Selectors_full make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Utils make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Molden make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory Leaving directory Entering directory rm test_atom ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_atom rm test_basis ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_basis rm test_bitlist ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_bitlist rm test_determinants ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_determinants rm test_elements ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_elements rm test_excitation ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_excitation rm test_gto ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_gto rm test_input ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_input rm test_mo_label ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_mo_label rm test_molecule ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_molecule rm test_point3d ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln test_point3d make executables Entering directory cd make executables Entering directory cd AOs make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd BiInts make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Bitmask make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Dets make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Electrons make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Ezfio_files make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Full_CI make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Generators_full make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Hartree_Fock make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd MOGuess make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd MonoInts make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd MOs make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Nuclei make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Output make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Selectors_full make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Utils make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory cd Molden make $(cat | grep MHz | wc Entering directory Entering directory Leaving directory Leaving directory rm executables \ for EXE in $(find f | grep |sort ) \ do printf ""%-30s %s\n"" $(basename $EXE) $EXE | sed >> executables done Leaving directory mv Leaving directory rm qp_basis_clean ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_basis_clean rm qp_create_ezfio_from_xyz ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_create_ezfio_from_xyz rm qp_edit ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_edit rm qp_print ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_print rm qp_run ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_run rm qp_set_ddci ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_set_ddci rm qp_set_mo_class ocamlbuild 0 camlp4o ""-g A"" ""-g A"" No parallelism done ln qp_set_mo_class Leaving directory Creating root of static directory Copying binary files Copying dynamic libraries Copying EMSL_Basis directory Copying scripts directory Creating the archive Done",5,29,1,58,2382
7,6,11,3256.876944,6,0.545,Code Refactoring,"add, move, rename, improve, implement, documentation, init, ignore, rotation, remove_unnecessary, functionality, util, refactor, base, constructor, todo, type_hint, definition, copyright, refactore","* Update UML for HamPar and * Provide definitions for HamiltonianParameter Add documentation for * Defer the memory efficiency until remove * Add constructor for * Add a private member dim to * Implement constructor for * Implement operator+ for * Implement * Implement transform and rotate for * (#3) * Add a unit test for the * Add extra headers for (#5) * (#4) * Install CMake and * Install Boost before * Fix * Remove unnecessary * Add extra headers for (#5) * Install CMake and * Install Boost before * Fix * Remove unnecessary * Add a Travis-CI badge for the master Add dependency * Add a conda * Add a unit test for the * (#7) * Update UML for Atom and * Update UML for * Remove unnecessary boost * Implement * Update UML for Atom and * Update UML for * Remove unnecessary boost * Implement * Implement * Add better message for build * Include Base, One and TwoElectronOperator * Implement constructors and getters for One and * Add better * Implement transform() for * Add transform() for * Add cpputil from * Add cpputil through * Now correctly include the cpputil through * Implement two-electron rotation reference * Add some documentation for JacobiRotationParameters and remove its * Fix a convention we only use p>q for Jacobi rotation parameters instead of p * Implement AOBasis constructor and * Add static_cast to * Test one- and two-electron integrals with HORTON for * Improve comments in calculateOne- and * Add a Szabo integrals * Update new file * Add libint to * Update * Update * Add a unit test for the * (#18) * Implement * (#7) * Update UML for Atom and * Update UML for * Remove unnecessary boost * Implement * Update UML for Atom and * Update UML for * Remove unnecessary boost * Implement * Implement * Add better message for build * Include Base, One and TwoElectronOperator * Implement constructors and getters for One and * Add better * Implement transform() for * Add transform() for * Add cpputil from * Add cpputil through * Now correctly include the cpputil through * Implement two-electron rotation reference * Add some documentation for JacobiRotationParameters and remove its * Fix a convention we only use p>q for Jacobi rotation parameters instead of p * Implement AOBasis constructor and * Add static_cast to * Test one- and two-electron integrals with HORTON for * Improve comments in calculateOne- and * Add a Szabo integrals * Update new file * Add libint to * Update * Update * (#3) * Add a unit test for the * Add extra headers for (#5) * (#4) * Install CMake and * Install Boost before * Fix * Remove unnecessary * Add extra headers for (#5) * Install CMake and * Install Boost before * Fix * Remove unnecessary * Add a Travis-CI badge for the master Add dependency * Add a conda * Add a unit test for the * (#7) * Update UML for Atom and * Update UML for * Remove unnecessary boost * Implement * Update UML for Atom and * Update UML for * Remove unnecessary boost * Implement * Implement * Add better message for build * Include Base, One and TwoElectronOperator * Implement constructors and getters for One and * Add better * Implement transform() for * Add transform() for * Add cpputil from * Add cpputil through * Now correctly include the cpputil through * Implement two-electron rotation reference * Add some documentation for JacobiRotationParameters and remove its * Fix a convention we only use p>q for Jacobi rotation parameters instead of p * Implement AOBasis constructor and * Add static_cast to * Test one- and two-electron integrals with HORTON for * Improve comments in calculateOne- and * Add a Szabo integrals * Update new file * Add libint to * Update * Update * Add a unit test for the * Implement * Update UML for HamPar and * Provide definitions for HamiltonianParameter Add documentation for * Defer the memory efficiency until remove * Add constructor for * Add a private member dim to * Implement constructor for * Implement operator+ for * Implement * Implement transform and rotate for",5,21,1,41,1627
10,7,10,3092.693222,7,0.4024,Data Structures and Operations,"method, list, return, object, result, class, attribute, property, exception, order, set, key, handle, backend, base, replace, dict, status, converter, qobj","DAGCircuit wires property to a set instead of a list (#3934) * Switch DAGCircuit wires property to a set instead of a list Right now the wires property of a DAGCircuit object is a list, however the way the property is used there is no need for Instead how its mostly used is to check if a wire is already a member of the list and to iterate over None of these require wires to be a list and using a list means the membership check is expensive especially for larger qubit counts since x in list() is O(n) as it has to iterate over the Switching to a set() makes this O(1) (in the normal case) because it just checks the hash of the * Use OrderedSet instead of set This commit pivots from set to OrderedSet because the wires property needs to maintain insertion We still get the benefits of the O(1) lookup from set but because it uses a list internally we also keep the insertion * Switch from ordered set back to set() with a property This commit stop using OrderedSet because we can achieve similar performance without an external Instead it changes wires to be a private attribute and makes a property wires() which will return a sorted bit This way we get the benefits of lookup time inside of a dagcircuit object but when something outside needs an ordered list of bits they can continue using the property as * Preserve insertion order instead of canonical sort For the output of the wires property we need to preserve the insertion order instead of returning the sorted The insertion order is preserved via qargs and cargs so this just leverages those to return a sorted order instead of trying to preserve ordering via the _wires attribute * Remove unecessary extra traversal on substitue_node_with_dag Currently the substitute_node_with_dag method unecessarily traveres the wire list twice to generate a list of quantum wires and classical wires only to combine them in a single list right As the number of bits in a circuit grows this gets increasingly expensive since were running isinstance 2*number of bits times when we never need to run * Fix lint Kevin Krsulich",3.75,23,1,51,1835
17,17,8.5,2993.122361,17,0.7472,Module Updates,"work, problem, small, module, fix, bug, testing, cleanup, output, start, notebook, model, issue, fit, solve, improvement, clean, stuff, part, filter","IIR filter finalized * Update test_connect to read password from variable * Modify all tests to allow setting RP password in environment * Typos and a few * Fixing byte transmission to work for Py 2 and * firstpoint and lastpoint in Asg module seems to be read-only * import part error * import error * thursday morning * model for tilt locking added * towards double integrator and 8th order filter * before cryocalibration * double integrator implemented but untested * pretrig bugfix * better scope bugfix * comment * 8th order inputfilter works * double integrator works * fixes * Attempt at fixing the Python 3 scope problem with list comprehension scope in class Not working * scope fix started * scope fix bitfile * fixing import and list problems * proportional_gain or unity_gain_frequency are possible * call model functions in lock sequence through * calibration and islocked called from configfile * gui window name lockbox name * fastpiezo and ringdown for fpm * git forgot * Now ""import pyrpl"" works for python * add testing file to * Not sure whats the good way of setting attri * Spectrum Analyzer cant instanlize yet * scope trigger logic cleaned up * fpm changes * scope module further cleanup and python3 compatibility attempt * stupid little bug * exclude gui test for python installation problem * SCPClient error fixed and hopefully makes connection more robust * Removed socket closed error * work on travis * hopefully restored to reasonable version after master messup * gui improvements, infer_open_loop_tf function added * Fixed requirements, LongRegister setter, * unittest includes int and long register setters * advanced trigger + burst mode * some python 3 fixes * Fixes gui autostart problem * fixes gui autostart problem * Fixes bug with rolling mode and channel disabling * sphinx autodoc added cd sphinx-apidoc * na logscale displays data in logscale (xaxis) too little axis labels in log(f) instead of real units too much work to improve * cleaned up second quadrature demodulation * phase shift occurs for demodulation instead modulation * IQ 2 output cleanup bugfixes * bitfile for demodulation phase issue * code resolving IQ max issue * fix bug * last bugfix tests passing * testing rounding in iq demodulator * small fixes for demodulation rounding * bitfile with iq amplitude up to 1V * gitignore changed to include fpga output logs * output from latest bitfile * bitfile with Yet very 2 more DSP s per IQ module rounding costs 1 DSP module per multiplication synthesis doesnt understand what we are trying to do * small changes * revert to previous iq version problem is saturation, not amplitude * less fancy rounding does not consume extra DSP slice * pyrpl docstrings * trivial saturation in product_sat * bitfile with rounding in virtually all multiplications * module input can be another module * 4 lowpass filters for complex IQ module for specan * na_trace function revived * started fixing But with persistent output probably Still impossible to Would be nice to have an explanation on what the internal properties do, an architectural overview of a typical * 4th order specan filter * signal and pyrpl docstrings added * fixes docstrings * bitfile with 4 iq2 filters cost 1-5% indication that shift lowpass filters are expensive we can migrate some filters to dsp48 blocks and gain more fpga space * fixes scale All nosetests passing * MemoryTree docstrings created * default lock allows output specification and documentation for model in config file section stuff piezo will only use piezo output for that lock stage * code documentation finished * setup_pdh needs no kwargs * pdh_setup generalized to arbitrary iq * fitting prototype * 1V IQ amplitude finally implemented * save_current_gain should work (untested), small fixes * fix * iq setup() conformized * iq proper saturation and amplitude polished * output amplitude can reach 1V now * install script and travis fixes * debugging has not been done * fixes _redpitaya_input bug * fix frequency_correction * iir setup integrated in pyrpl * iir works * iir management fixes * iir without extra data buffer * iir fix * bitfile iir * removed adder tree replaced by cumulative addition of output * forgot declaration * bitfile * reduced resources * 16 biquads * bitfile * inputfilter for iir, not limited to loops iirstages, filter output bitwidth > input bitwidth * comma fixed * 24 biquads in iir * filter fully implemented * full 24 biquad IIR * resonable filter settings, not compiled yet with altered pipeline * pipeline altered for extra delay * bugfix * unsuccessful timing optimisation * na prints acquisition time * bitfile working version restored with filter test * filter_module bug + fix of same bug * bitfiles * started pid unittest * another bugfix in filter_modules * regression to earlier version of fpga code without extrafilterbits * gives correct model up to delay * functionality restored, implementation of module transfer functions advanced * better bitfile * pid transfer function correct, unittest for pid and na better modelisation as well all tests are passing * better logo * new filter * 16 biquads 40bits and tests passing * autocorrecting na * iq model improvements for tutorial * test iq bandpass with na * Develop iir (#55) * debugging iir with 8 stages * recompiled version * transfer function property for iir module, some cleanups * filter seems to work again, test added, cleaned out module * iir 2 biquad filter test passing * 16 biquads passing nosetests IIR test uses a generator to save all failures in case one curve fails and to show progress more constantly in nosetests * Develop iir (#56) * debugging iir with 8 stages * recompiled version * transfer function property for iir module, some cleanups * filter seems to work again, test added, cleaned out module * iir 2 biquad filter test passing * 16 biquads passing nosetests IIR test uses a generator to save all failures in case one curve fails and to show progress more constantly in nosetests * trying 20 biquad filter * higher numerical precision improved transfer function * small fix * 40th order IIR almost working (only delay related problems remaining) * zero order hold for input signal in iir instead of continuous sampling didnt work out (bug somewhere) * small fix * minimum delay fpga design * prewarping solves frequency mismatch problem * delay and minloops are correct now",3,19,1,38,1707
4,1,12.5,2952.434236,1,0.3962,Compiler Optization,"pass, call, local, move, sequence, program, compile, functionality, compilation, configuration, measurement, simulator, statement, process, work, simple, implement, measure, code, logic","tests for the ProjectQ plugin (#24) * added stub plugin file for the ProjectQ plugin * improved documentation and started coding * added gates and started modifying the implementation of the PluginAPI class * implemented initialization of engine fixed demo circuit fixed plugin name fixed typo in initialization of _capabilities * fixed gates and disabled some more ""problematic"" gates for now * implemented circuit execution and expectation value collection added MeasureX, Y, and Z * use pq Compute() and Uncompute() to during execution made demo circuits compatible with those of the SF plugin to make tests run more easiliy * first version that passes all tests for the standard Simulator backend * trying to get multi qubit gates to work explained why only the Simulator backend can be enabled at the moment fixed names of single qubit measurements * new gates now SqrtX, Swap, SqrtSwap, Rx, Ry, Rz * Most single and two qubit gates work now * Outsource discussion from paper to separate Resolve Christians open The derivative rules do not work if a non-Gaussian gate follows the one we derive * Adapted Heisenberg trafo for phase gate to SF standard * minor change * chain rule in heisenberg picture * I agree with nathans comment * added code and comments to demonstrate the deallocation issue with ProjectQ, simply run to trigger the error message * code cleanup and fixed many pylint errors * in the process of fixing the deallocation problem * deallocation issue more or less solved * further cleanup and docstrings improved * classical backend now essentially work * fixed pass on of parameters to the IBMBackend * IBMBackend now working up to login * added AllZ gate ane AllZ measurement as good as currently possible * remote circuit execution on IBMBeckend now works * finally made measure() almost work with the IBMBackend * improved qureg (de-)allocation to make all backend happy at the same time commented out the code that is suppose to estimate expectation values during measure() for the IBMBackend * first version in wich all tests pass with both the Simulator and the IBMBackend * implementation of execute() for Observables in the IBMBackend still missing * workaronud for measurements failing on trivial circuits added do deallocation also for the IBMBackend as it needs it as well removed debuggin output added a proposal for a requires_credentials() method to the API that can be called to exclude certain backends from automated tests * all tests now run with the Simulator and IBMBackend code cleanup and debut output removed * Classical backend now works more demo circuits * removed the with Compute() statements minor cleanup * implemented methods for the new parameter pass on code reasonable cleaning of received paramters improved __repr__() and __str__() write warnings to log instead of raising a warning make requires_credentials() an instance method * moved projectQ plugin to new location to prepare putting it in separate module * adding license, readme and a few stub files * added and an example which does not yet work * deleted the energy minimization example from openqml_pq * started editing the plugin to adopt it the API changes * adopted openqml imports in ProjectQ plugin added * miving around code * new style mapping for gates and observables * untangling the parts of the ProjectQ plugin for the different ProjectQ backends * moved initialization of engine and reg to __init__() * implementing measurement logic * moved initialization to reset() to play according to the rules of the new API first version that successfully runs the example * added check for user and password in the ibm backend added code to example to read user and password from command line * implementing measure() for the ibm backend fixed docstrings * allow the use of different optimizers in the example * moved conversion from gate names to gates into apply() added some default options for testing the ibm backend * do not call reset() manually as it is superfluous * renamed measure() to expectation() fixed typo in call to * fixed help message for option in example * added makefile and a first unit test based on the qubit optimization example * extended the test to test various optimizers",4,26,1,59,2570
3,21,14,2725.71131,21,0.3954,Dependency Management,"version, build, package, dependency, install, requirement, path, cmake, source, require, target, instal, compile, project, library, compiler, installation, tool, external, late","BUILD and WORKSPACE files for Bazel Fixes (#934) All compile on Bazel as a result of this ``` bazel build Analysed target (0 packages Found 1 Target Elapsed Critical 0 Build completed successfully, 1 total action bazel build Analysed target (0 packages Found 1 Target Elapsed Critical 0 Build completed successfully, 1 total action bazel build operations_proto params_proto program_proto bazel build operations_proto params_proto program_proto bazel build Analysed target (0 packages Found 1 Target Elapsed Critical 0 Build completed successfully, 1 total action ```",6.25,33,1,69,2525
14,18,9.5,2665.860139,18,0.5243,Continous Integration,"run, job, time, issue, fail, release, python, commit, support, step, user, window, cache, build, ensure, tag, commit_add, failure, script, part","wheels automatically in CI environment (#168) * Build wheels automatically in CI environment Right now when its time to push a relase of qiskit-aer we have to manually build wheels for all our supported environments because we included compiled code in the This involves setting up a proper environment with portable librariers and compilers in Linux, Windows, and Mac OSX with all 3 versions of python we Then manually building the 9 wheels necessary to publish on There is no reason this manual step needs to exist and we can just leverage CI to do our wheel building when its time to do a This commit adds initial support for building our wheels in travis (for linux and osx) and appveyor (for It leverages the cibuildwheel project to automate the wheel This will ensure we setup the proper environment for all 3 python versions on all 3 environments (for example pulling in the manylinux docker container on * Always upload built wheels and set pass for twine upload This commit fixes 2 things, first it updates the publish artifact task to always run even if we encounter an error while building This gives us the option to manual build and debug failed builds while using the ci built ones Then in the commented out section of the task to upload the built wheels to pypi the password is set for When the time comes to prepare this for merge we will need to add the twine password to the azure config as a * On windows manually build instead of using cibuildwheel This commit pivots the windows wheel building environment away from using The aer build environment needs a very specific setup to work, especially on windows, and getting it working with a general purpose tool like cibuildwheel is very Mostly because cibuildwheel is built around creating an isolated environment with default tools to ensure a clean build every This is causing conflicts with aers build system expectations and that makes it difficult to When weighing this difficulty against the benefits of cibuildwheel on windows (which is less than osx or linux where they use additional tools for validation of output and on linux using the manylinux docker images) the benefits dont seem worth So instead of relying on cibuildwheel this writes a for loop doing essentially the same thing, but instead leveraging conda on windows and manually invoking instead of using pip * Avoid git clean on windows builds This commit switches away from git clean to use explict rm This is because the git clean calls are deleting the updated wheels since they match the wild card in the gitignore * Run wheel publish jobs only on new tags and actually upload Now that weve finally debugged the wheel build process on all python versions across all 3 supported OSes its time to prepare this job for actually automating wheel publishing at This commit does 2 things first it makes all the new jobs conditional so they only run on new tags (ie a The second thing it does is uncomment the twine upload Now after each job finishes its wheel build it will upload those files to pypi Juan Gomez",3,18.75,1,39,1602
18,20,8,2570.593056,20,0.374,Circuit Design,"fix, gate, circuit, import, qubit, style, instruction, method, operation, lint, support, display, label, control, deprecate, draw, remove, visualization, op, mergify","support for displaying controlled gates to latex (#3777) * Add support for displaying controlled gates to latex This commit adds support for drawing controlled gates to the latex It handles an arbitrary number of controls on a gate and will visualize them as controls instead of as a custom multiqubit Fixes * Handle multiqubit gates with controls This commit adds handling for multiqubit gates to the handling of ControlledGate operations in the latex The earlier revision did not take into account that the gate being drawn might have more than 1 It adjusts the handling of the input qargs to be an arbitrary number of controls and gate * Fix lint * Update gate name to reflect api changes In the parameters for ControlledGate objects were changed in an incompatible manner which removed the base_gate_name attribute in favor of storing an instance of the inner gate This commit updates the usage so that we can set the name of the gate correctly in the * Handle controls in the middle of multiqubit gates When a control is present in the middle of multiqubit gate the drawer would not properly handle that case For the text drawer this was addressed by adding the control dot on the input side of the gate However, because of limitations in the qcircuit library we use for the latex visualization that isnt currently This commit handles this edge case by checking if there is a control in the span of the multiqubit gate and if so just treating the whole thing a big multiqubit gate box instead of trying to render the controls mergify",3,23,1,52,1999
16,8,8.5,1006.950694,8,0.7308,Legacy Code & Deprecation,"update, fix, minor_version, warning, remove, minor, comment, sample, miss, move, rename, address, begin, bug, deprecation, namespace, clean, conversion, split, late","to (#98) * Begin refactoring standard libraries (#39) * Began splitting up * Began refactoring * Updated chemistry src and tests for new * Remove unused * Began renaming operations and * Separated out and updated * Updated BE ↔ LE type * Added new transformed operation * Whitespace fix * Eliminated some redundant code in applyreversed * Fixed deprecation * Began working on refactoring * Refactored With * More renaming for consistency with suffix * Added Zip3, Zip4 * Added shorthand for MAJ and updated some type * Fixed a typo in * Separated out and updated arithmetic * Other minor maintenance * Started separating out modular * Began refactoring ripple-carry * Refactored integer increment * Fixed some See Also * Some minor * Moved new arithmetic functionality into right * Renamed integer arithmetic * Split out qecc * Added documentation file for * Progress on renaming type conversion * More progress on updating type conversion * Split out AA * Split out oracles namespace as * Renamed UDTs to remove ""AmpAmp"" This prefix is now implied by the * Renamed some Qecc * Moved more conversions into * Updated some deprecated * Split out * Added missing open * Started separating out classical * Began separating out * Fixing namespaces in * Update to use new * Began making arrays * Updated to use new arrays and diagnostics * Updated names for claims * Started extracting measurements from * Updated namespaces in tests as * Updating chemistry for most recent * Added ForEach, used to simplify * Updating deprecated Q# * Minor fix for XML * Fixed infinite recursion in deprecation * Started trying to reduce of * Fixed some minor build * Resolved a couple * Removed BigEndian * Resolved warnings due to && and * Update cgranade * Addressing * Claim → Fact * Moved MeasureInteger back to * Resolved more deprecated * Removed one more LE * Addressing * move (#57) * Revert ""Begin refactoring standard libraries (#39)"" (#56) As Chris pointed out, reverting these breaking changes until we have a chance to change * Complete move of standard library refactoring to release branch This reverts commit * Explicitly qualify all names in (#74) * Explicitly qualify all names in * Fixed two missing qualified * Removed more occurances of * Removed from tests as * Reverted slight change to * New array functions (#75) * Added new IndexRange function to eliminate `-1` in for * Added some missing open * New Enumerated * Port library and test code to new names to reduce warning (#72) * Updating to use new syntax, namespace names, * More primitive → * Updated test project to use beta * Updated chemistry proiects to * Finding a few more calls to deprecated * Cleaned up some assert and qcvv * Removed uses of deprecated IntArrayFromRange * Resolved some more deprecated functions and * Minor maintenance in * Bumped versions to latest * Some trivial change to retrigger * Resolved package * Move UDT and resolve deprecation (#77) * More primitive → * Finding a few more calls to deprecated * Resolved some more deprecated functions and * Minor maintenance in * Bumped versions to latest * Resolved package * Use Complex UDT at its new * Adapted * A few more test * Updated name of AssertQubitState to * Fixes to * Getting updates from master (#80) * Revert ""Begin refactoring standard libraries (#39)"" (#56) As Chris pointed out, reverting these breaking changes until we have a chance to change * Missing return statement when compiling more than one Q# snippet from (#60) * Fixing bug * Adding tests * Change to (#64) * Prevent loading Q# modules when Python client is (#71) * Prevent loading Q# modules when Python client is * Linux build failed with some unrelated * modifying contructor calls for QArray in preparation for a simulation framework change (#78) * Revert ""Revert ""Begin refactoring standard libraries (#39)"" (#56)"" This reverts commit * Update to (#81) * Update to * Removed deprecation warnings for * Resolved a few more * Resolved a few more deprecation * A few more deprecation * Removed some duplicate namespace * Slight code * Addressed feedback from * builds again, builds (#84) * chemistry deprecation (#82) * Update to * Removed deprecation warnings for * Resolved a few more * Resolved a few more deprecation * A few more deprecation * Removed some duplicate namespace * Slight code * Update test * Remove deprecated operations from chemistry and * Fix comments * Update to use syntax from latest (#87) * Ported to * Fixed deprecation in * Updated to latest * Fix mutable array issue in chemistry data (#88) * Explicitly call new (#89) * do not rely on (#93) * Continue migrating libraries to Q# (#91) * Continue migrating to syntax and applying style * A bit more progress normalizing private * Resolved more deprecated syntax, updated a * Resolved some more syntax * Ported more syntax and updated more * Resolved all remaining compile-time warnings in * Addressed all Q#-level compile-time warnings in * Migrated a bit more syntax and updated to newest * Moved to using intrinsic * Fixed endianness of exact * Fixed * Addressing * Removed some warnings in unit * Adding DocsOutDir for single doc output location across (#94) * Adding DocsOutDir for single doc output location across * Begin adding more classical math functions for (#96) * Begin adding more classical math functions for * Addressing * Minor * Bump to latest * Fixed two minor * Fixed the type of * Bump version to released",4,18.25,1,36,2079